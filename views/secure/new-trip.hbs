
<nav class="navbar sticky-top navbar-expand-lg navbar-dark" style="background-color: #057717;">
     <p class="navbar-brand m-0" href="#"><b>GreenCDMX</b></p> 
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item active">
          <a class="navbar-brand" href="#">
            {{!-- <img src="/public/images/bootstrap-solid.svg" width="30" height="30" alt=""> --}}
          </a>
        </li>
        <li class="nav-item active">
          <a class="nav-link" href="/profile">Profile</a>
        </li>
        <li class="nav-item active">
          <a class="nav-link" href="/logout">Log Out</a>
        </li>

      </ul>

    </div>
  </nav>


<div class="container mt-5">
<div class="input-group mt-3">
  <div class="input-group-prepend">
    <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Recent Trips</button>
    <div class="dropdown-menu">
    {{#each trips as |trip|}}
    <a class="dropdown-item" href="#">{{trip.fromAdr}} to {{trip.toAdr}}</a>
    {{!-- <p>{{place.fromAdr}}  <a href="delete/{{this._id}}"><small>Delete</small></a></p> --}}
    {{/each}}
      {{!-- <a class="dropdown-item" href="#">Action</a>
      <a class="dropdown-item" href="#">Another action</a>
      <a class="dropdown-item" href="#">Something else here</a>
      <div role="separator" class="dropdown-divider"></div>
      <a class="dropdown-item" href="#">Separated link</a>
    </div> --}}
  </div>
  <input type="text" class="form-control" aria-label="Text input with dropdown button">
</div>
</div>
<div class="container mt-5">
  <div>
    <p id="text-message">Select an Address: {{location.coordinates.[0]}}</p>
  </div>
<div id="search" class="input-group mb-3">
  <div  class="form-group ml-0"></div>
  {{!-- <div id='map' style='display: inline-flex;width: 400px; height: 300px;'></div> --}}
</div>
<div class="container" id="map" style="width: 80vw; height: 20vw; margin: 25px;"></div>
<div id="results-div">

<table class="table table-borderless">
  <tbody>
    <tr>
      <th scope="row"><button class="btn btn-primary save_button"  id="select-button-from" onclick="toggleStart()">Add as Start Point</button></th>
      <td class="align-middle mb-0" id="from-text"></td>
      <td><button class="btn btn-light align-middle" id="select-button-from" onclick="toggleStart()" style="visibility: hidden;">Delete</button></td>
    </tr>
    <tr>
     <th scope="row"><button class="btn btn-primary save_button" id="select-button-to" onclick="toggleEnd()">Add as Destination</button></th>
      <td class="align-middle mb-0"  id="to-text"></td>
      <td><button class="btn btn-light align-middle" id="select-button-to" onclick="toggleStart()" style="visibility: hidden;">Delete</button></td>
    </tr>
    <tr>
      <th scope="row"> <button class="btn btn-primary save_button" id="select-button-search" onclick="toggleSearch()" style="background-color: #052C77; color: white; border-color:white; visibility: hidden">Search Routes</button></th>
    </tr>
  </tbody>
</table>



<div class="card-group mt-5 mb-5" id="routing-alternatives" style="visibility: hidden;">
  
  
  
  
                <div class="card">




                              <div class="card-body">
                                <i class="fas fa-walking fa-2x"></i>
                                <h5 class="card-title">Walking</h5>
                                <p class="card-text" id="walking-text"></p>
                              </div>
                              <div class="card-footer">
                                <p class="card-text" id="walking-footer"></p>
                              </div>
                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
                            I will walk
                            </button>
                            <!-- Modal -->
                            <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered" role="document">
                              <div class="modal-content">
                                <div class="modal-header">
                                  <h5 class="modal-title" id="exampleModalCenterTitle">You are going to walk</h5>
                                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                  </button>
                                </div>
                                <div class="modal-body">
                                  <form action="/{{user._id}}/newTrip" method="post" style="display: none;">
                                    <input class="form-control" type="text" name="fromAdr" id="fromAdr">
                                    <input class="form-control" type="text" name="toAdr" id="toAdr">
                                    <input class="form-control" type="text" name="fromLng" id="fromLng">
                                    <input class="form-control" type="text" name="fromLat" id="fromLat">
                                    <input class="form-control" type="text" name="toLng" id="toLng">
                                    <input class="form-control" type="text" name="toLat" id="toLat">
                                    <input class="form-control" type="text" name="co2" id="co2">
                                    <input class="form-control" type="text" name="cal" id="cal">
                                </div>
                                <div class="modal-footer">
                                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Back</button>
                                  <form action="/{{_id}}/newTrip" method="post">
                              <input type="submit" value="Send this trip to my email" class="btn btn-primary">
                            </form>
                                </div>
                              </div>
                              </div>
                              </div>
                </div>
              


                <div class="card">



                            <div class="card-body">
                              <i class="fas fa-bicycle fa-2x"></i>
                              <h5 class="card-title">Biking</h5>
                              <p class="card-text" id="biking-text"></p>
                            </div>
                            <div class="card-footer">
                              <p class="card-text" id="biking-footer"></p>
                            </div>


                          <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
                          I will take the bike
                          </button>
                          <!-- Modal -->
                          <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                          <div class="modal-dialog modal-dialog-centered" role="document">
                            <div class="modal-content">
                              <div class="modal-header">
                                <h5 class="modal-title" id="exampleModalCenterTitle">You are going to take a bike</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                  <span aria-hidden="true">&times;</span>
                                </button>
                              </div>
                              <div class="modal-body">
                                <form action="/{{user._id}}/newTrip" method="post" style="display: none;">
                                  <input class="form-control" type="text" name="fromAdr" id="fromAdr">
                                  <input class="form-control" type="text" name="toAdr" id="toAdr">
                                  <input class="form-control" type="text" name="fromLng" id="fromLng">
                                  <input class="form-control" type="text" name="fromLat" id="fromLat">
                                  <input class="form-control" type="text" name="toLng" id="toLng">
                                  <input class="form-control" type="text" name="toLat" id="toLat">
                                  <input class="form-control" type="text" name="co2" id="co2">
                                  <input class="form-control" type="text" name="cal" id="cal">
                              </div>
                              <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Back</button>
                                <form action="/{{_id}}/newTrip" method="post">
                            <input type="submit" value="Send this trip to my email" class="btn btn-primary">
                          </form>
                              </div>
                            </div>
                            </div>
                            </div>
                </div>
                

                <div class="card">
                              <div class="card-body">
                                <i class="fas fa-car-side fa-2x"></i>
                                <h5 class="card-title">By Car</h5>
                                <p class="card-text" id="driving-text"></p>
                              </div>
                
                </div>
  </div>
  



<div class="input-group mb-3"  >
  <form action="/{{user._id}}/newTrip" method="post" style="visibility: hidden;">
  <input class="form-control" type="text" name="fromAdr" id="fromAdr">
  <input class="form-control" type="text" name="toAdr" id="toAdr">
  <input class="form-control" type="text" name="fromLng" id="fromLng">
  <input class="form-control" type="text" name="fromLat" id="fromLat">
  <input class="form-control" type="text" name="toLng" id="toLng">
  <input class="form-control" type="text" name="toLat" id="toLat">
  <input class="form-control" type="text" name="co2" id="co2">
  <input class="form-control" type="text" name="cal" id="cal">
    {{!-- <div class="form-group">
      <label for="name">Trip Name</label>
      <input value="{{name}}" class="form-control" type="text" name="name" id="name">
    </div> --}}
    {{!-- <div class="form-group">
      <label for="lng">Longitude</label>
      <input value="{{location.coordinates.[0]}}" class="form-control" type="text" name="lng" id="lng">
      <label for="lat">Latitude</label>
      <input value="{{location.coordinates.[1]}}" class="form-control" type="text" name="lat" id="lat">
    </div> --}}
  <input type="submit" id="send-email" value="Send this trip to my email" class="btn btn-primary">
  




<script>
  let button_val = document.getElementById("select-button");
  //let input_lat = document.getElementById("lat");
  //let input_address = document.getElementById("address")
  mapboxgl.accessToken =
    "pk.eyJ1Ijoib3R0b2NvZGViZXJsaW4iLCJhIjoiY2swZHhueDF0MGMzbzNobzB1dmQ3Z2x0NiJ9.ybxTXyweubqcEFqhRhyWmw";
  let map = new mapboxgl.Map({ container: "map", style: "mapbox://styles/mapbox/light-v10" });
  let geocoder = new MapboxGeocoder({
    accessToken: mapboxgl.accessToken, 
    countries: 'mx',
    //bbox: [139.965, -38.030, 155.258, -27.839],
    // apply a client side filter to further limit results to those strictly within
    // the New South Wales region
    //filter: function (item) {
    // returns true if item contains New South Wales region
    //  return item.context.map(function (i) {
    // id is in the form {index}.{id} per https://github.com/mapbox/carmen/blob/master/carmen-geojson.md
    // this example attempts to find the `region` named `New South Wales`
   //     return (i.id.split('.').shift() === 'region' && i.text === 'Distrito Federal');
   //     }).reduce(function (acc, cur) {
    //  return acc || cur;
    //  });
   // },
    mapboxgl: mapboxgl
  })
  let coordArray
  let nameArray
  document.getElementById("search").appendChild(geocoder.onAdd(map))
  geocoder.on('result', function(results) {
   nameArray=results.result.place_name
   coordArray=results.result.center
   //button_val.innerText = 'Add the following address: ' + nameArray;
  //button_val.innerText = 'Add the following address: ' + nameArray;
  })

  let fromArray={}
  let toArray={}
  function toggleStart() {
      fromArray.address=nameArray
      fromArray.coords=coordArray
     
      if (fromArray.address===toArray.address) {  //If start and destination are the same, delete the start point
        document.getElementById("from-text").innerHTML=''
        document.getElementById("select-button-search").style.visibility = "hidden"
      } else {
      document.getElementById("fromAdr").value= nameArray
      document.getElementById("from-text").innerHTML=nameArray
      document.getElementById("fromLng").value= coordArray[0]
      document.getElementById("fromLat").value= coordArray[1]
      }
       if (toArray.address && fromArray.address) {  //If both start and destination are defined, show calculation button
        document.getElementById("select-button-search").style.visibility = "visible"
      } 
    } 
    
    function toggleEnd() {
      toArray.address=nameArray
      toArray.coords=coordArray
     
       if (toArray.address===fromArray.address) {  //If start and destination are the same, delete the end point
        document.getElementById("to-text").innerHTML=''
        document.getElementById("select-button-search").style.visibility = "hidden"
      } else {
      document.getElementById("toAdr").value= nameArray
      document.getElementById("to-text").innerHTML=nameArray
      document.getElementById("toLng").value= coordArray[0]
      document.getElementById("toLat").value= coordArray[1]
      }
       if (toArray.address && fromArray.address) {  //If both start and destination are defined, show calculation button
        document.getElementById("select-button-search").style.visibility = "visible"
      } 
    } 
    
  async function toggleSearch() {
    document.getElementById("select-button-search").style.visibility = "hidden"
      let walking= await getRouteWalking(fromArray.coords, toArray.coords)
      let biking= await getRouteBiking(fromArray.coords, toArray.coords)
      let driving= await getRouteDriving(fromArray.coords, toArray.coords)
      walking= walking[0]
      biking=biking[0]
      driving= driving[0]
    
      document.getElementById("routing-alternatives").style.visibility = "visible"
      let walkingDistance=walking.distance
      let walkingDuration=walking.duration
      //
      //
      //Here comes the calculation
      document.getElementById("co2").value= ((walkingDistance/1000)*100).toFixed(0)
      document.getElementById("cal").value= (Math.floor(walkingDuration/60))*10
      //
      //
      //
      let text = 'Walking Distance: ' + (walkingDistance/1000).toFixed(1) + ' km. Duration: '+ Math.floor(walkingDuration/60)+ ' min '
      document.getElementById("walking-text").innerHTML = text
      
      let bikingDistance=biking.distance
      let bikingDuration=biking.duration
      text = 'Distance by Bike: ' +(bikingDistance/1000).toFixed(1) + ' km. Duration: '+ Math.floor(bikingDuration/60)+ ' min '
      document.getElementById("biking-text").innerHTML = text
                                               
      let drivingDistance=driving.distance
      let drivingDuration=driving.duration
      text = 'Distance by Car: ' +(drivingDistance/1000).toFixed(1) + ' km. Duration: '+ Math.floor(drivingDuration/60)+ ' min '
      document.getElementById("driving-text").innerHTML = text

      document.getElementById("send-email").style.visibility = "visible"
      //document.getElementById("select-button").style.visibility = "hidden"      
        } 
 

  function getRouteWalking(start,end) {
  let url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;
  return fetch(url)
  .then(res => res.json())
  .then(res => res.routes)
 }

 function getRouteBiking(start,end) {
  let url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;
  return fetch(url)
  .then(res => res.json())
  .then(res => res.routes)
 }

 function getRouteDriving(start,end) {
  let url = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;
  return fetch(url)
  .then(res => res.json())
  .then(res => res.routes)
 }

  // map.addControl(new MapboxDirections({ accessToken: mapboxgl.accessToken }), 'top-left')
  //map.addControl(new mapboxgl.NavigationControl());
</script>
</div> 
</form>
</div>

   