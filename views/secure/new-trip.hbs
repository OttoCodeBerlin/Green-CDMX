<nav class="navbar sticky-top navbar-expand-lg navbar-dark" style="background-color: #057717;">
  <p class="navbar-brand m-0" href="#"><b>GreenCDMX</b></p>
  <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
    aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>

  <div class="collapse navbar-collapse" id="navbarSupportedContent">
    <ul class="navbar-nav mr-auto">
      <li class="nav-item active">
        <a class="navbar-brand" href="#">
          {{!-- <img src="/public/images/bootstrap-solid.svg" width="30" height="30" alt=""> --}}
        </a>
      </li>
      <li class="nav-item active">
        <a class="nav-link" href="/profile">Profile</a>
      </li>
      <li class="nav-item active">
        <a class="nav-link" href="/logout">Log Out</a>
      </li>

      <li class="nav-item active">

        <div class="input-group-prepend">
          <button class="btn btn-primary dropdown-toggle ml-5" type="button" data-toggle="dropdown" aria-haspopup="true"
            aria-expanded="false">Recent Trips</button>
          <div class="dropdown-menu">
            {{#each trips as |trip|}}
            <a class="dropdown-item"
              onclick="fillAdr( {{trip.fromCoords.[0]}} , {{trip.fromCoords.[1]}} , {{trip.toCoords.[0]}} , {{trip.toCoords.[1]}} )">{{trip.fromAdr}}
              <b>to</b> {{trip.toAdr}}</a>
            {{/each}}

          </div>
      </li>
    </ul>

  </div>
</nav>


<div class="container mt-5">
  <div>
    <p id="text-message">Select an Address:</p>
  </div>
  <div id="search" class="input-group mb-3">
    <div class="form-group ml-0"></div>
    {{!-- <div id='map' style='display: inline-flex;width: 400px; height: 300px;'></div> --}}
  </div>
  <div class="container" id="map" style="width: 80vw; height: 20vw; margin: 25px;"></div>
  <div id="results-div">

    <table class="table table-borderless">
      <tbody>
        <tr>
          <th scope="row"><button class="btn btn-primary save_button" id="select-button-from-th" onclick="toggleStart()"
              style="background-color: #052C77; color: white; border-color:white;">Add as Start Point</button></th>
          <td class="align-middle mb-0" id="from-text"></td>
          <td><button class="btn btn-light align-middle" id="delete-button-from" onclick="deleteStart()"
              style="visibility: hidden;">Delete</button></td>
        </tr>
        <tr>
          <th scope="row"><button class="btn btn-primary save_button" id="select-button-to-th" onclick="toggleEnd()"
              style="background-color: #052C77; color: white; border-color:white;">Add as Destination</button></th>
          <td class="align-middle mb-0" id="to-text"></td>
          <td><button class="btn btn-light align-middle" id="delete-button-to" onclick="deleteEnd()"
              style="visibility: hidden;">Delete</button></td>
        </tr>
        <tr>
          <th scope="row"> <button class="btn btn-primary save_button" id="select-button-search"
              onclick="toggleSearch()"
              style="background-color: #052C77; color: white; border-color:white; visibility: hidden"><b>Search
                Routes</b></button></th>
        </tr>
      </tbody>
    </table>

    <div class="card-group mb-5" id="routing-alternatives" style="visibility: hidden;">

      <div class="card">
        <div class="card-body">
          <i class="fas fa-walking fa-2x"></i>
          <h5 class="card-title">Walking</h5>
          <p class="card-text" id="walking-text"></p>
        </div>
        <div class="card-footer">
          <p class="card-text" id="walking-footer"></p>
        </div>
        <div class="card-footer">
          <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter1"
            onclick="setWalkCals()">
            I will walk
          </button>
        </div>
        <!-- Modal -->
        <div class="modal fade" id="exampleModalCenter1" tabindex="-1" role="dialog"
          aria-labelledby="exampleModalCenter1Title" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenter1Title">You are going to walk</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">
                <h3 class="card-text" id="walking-modal"></h3>

                <form action="/{{user._id}}/newTrip" method="post" style="display: none;">
                  <input class="form-control" type="text" name="fromAdr" id="fromAdr">
                  <input class="form-control" type="text" name="toAdr" id="toAdr">
                  <input class="form-control" type="text" name="fromLng" id="fromLng">
                  <input class="form-control" type="text" name="fromLat" id="fromLat">
                  <input class="form-control" type="text" name="toLng" id="toLng">
                  <input class="form-control" type="text" name="toLat" id="toLat">
                  <input class="form-control" type="text" name="co2" id="co2">
                  <input class="form-control" type="text" name="cal" id="cal">
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Back</button>
                <form action="/{{_id}}/newTrip" method="post">
                  <input type="submit" value="Send this trip to my email" class="btn btn-primary">
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="card">
        <div class="card-body">
          <i class="fas fa-bicycle fa-2x"></i>
          <h5 class="card-title">Biking</h5>
          <p class="card-text" id="biking-text"></p>
        </div>
        <div class="card-footer">
          <p class="card-text" id="biking-footer"></p>
        </div>
        <div class="card-footer">
          <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter2"
            onclick="setBikeCals()">
            I will take the bike
          </button>
        </div>
        <!-- Modal -->
        <div class="modal fade" id="exampleModalCenter2" tabindex="-1" role="dialog"
          aria-labelledby="exampleModalCenter2Title" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenter2Title">You are going to take a bike</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">
                <h3 class="card-text" id="biking-modal"></h3>

                <form action="/{{user._id}}/newTrip" method="post" style="display: none;">
                  <input class="form-control" type="text" name="fromAdr" id="fromAdr2">
                  <input class="form-control" type="text" name="toAdr" id="toAdr2">
                  <input class="form-control" type="text" name="fromLng" id="fromLng2">
                  <input class="form-control" type="text" name="fromLat" id="fromLat2">
                  <input class="form-control" type="text" name="toLng" id="toLng2">
                  <input class="form-control" type="text" name="toLat" id="toLat2">
                  <input class="form-control" type="text" name="co2" id="co22">
                  <input class="form-control" type="text" name="cal" id="cal2">
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Back</button>
                <form action="/{{_id}}/newTrip" method="post">
                  <input type="submit" value="Send this trip to my email" class="btn btn-primary">
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="card">
        <div class="card-body">
          <i class="fas fa-car-side fa-2x"></i>
          <h5 class="card-title">By Car</h5>
          <p class="card-text" id="driving-text"></p>
          <h3 class="card-text" id="driving-co2" style="color: #C70039"></h3>
        </div>

      </div>
    </div>

    <div class="input-group mb-3">


      <script>//Mapbox script and trip subfunctions

        let button_val = document.getElementById("select-button");
        mapboxgl.accessToken =
          "pk.eyJ1Ijoib3R0b2NvZGViZXJsaW4iLCJhIjoiY2swZHhueDF0MGMzbzNobzB1dmQ3Z2x0NiJ9.ybxTXyweubqcEFqhRhyWmw";
        let map = new mapboxgl.Map({ container: "map", style: "mapbox://styles/mapbox/light-v8" }); //light
        let geocoder = new MapboxGeocoder({
          accessToken: mapboxgl.accessToken,
          marker: {
            color: 'orange'
          },
          countries: 'mx',
          bbox: [-99.335248, 19.188939, -98.961854, 19.591450],

          mapboxgl: mapboxgl
        })
        let coordArray
        let nameArray
        document.getElementById("search").appendChild(geocoder.onAdd(map))
        geocoder.on('result', function (results) {
          nameArray = results.result.place_name
          coordArray = results.result.center
          //button_val.innerText = 'Add the following address: ' + nameArray;
          //button_val.innerText = 'Add the following address: ' + nameArray;
        })

        let fromArray = {}
        let toArray = {}

        function fillAdr(fromLng, fromLat, toLng, toLat) {
          fromArray.coords = [fromLng, fromLat]
          toArray.coords = [toLng, toLat]
          console.log(fromArray.coords)
          toggleSearch()
        }

        function toggleStart() {
          fromArray.address = nameArray
          fromArray.coords = coordArray
          if (nameArray === document.getElementById("to-text").innerHTML) {  //If start and destination are the same, delete the start point
            document.getElementById("select-button-search").style.visibility = "hidden"
            document.getElementById("from-text").innerHTML = ''
            document.getElementById("delete-button-from").style.visibility = "hidden"
          } else {
            document.getElementById("fromAdr").value = nameArray
            document.getElementById("fromAdr2").value = nameArray
            document.getElementById("from-text").innerHTML = nameArray
            document.getElementById("delete-button-from").style.visibility = "visible"
            document.getElementById("fromLng").value = coordArray[0]
            document.getElementById("fromLat").value = coordArray[1]
            document.getElementById("fromLng2").value = coordArray[0]
            document.getElementById("fromLat2").value = coordArray[1]
          }
          if (document.getElementById("from-text").innerHTML && document.getElementById("to-text").innerHTML) {  //If both start and destination are defined, show calculation button
            document.getElementById("select-button-search").style.visibility = "visible"
          } else {
            document.getElementById("select-button-search").style.visibility = "hidden"
          }
        }

        function toggleEnd() {
          toArray.address = nameArray
          toArray.coords = coordArray
          if (document.getElementById("from-text").innerHTML === nameArray) {  //If start and destination are the same, delete the end point
            document.getElementById("select-button-search").style.visibility = "hidden"
            document.getElementById("to-text").innerHTML = ''
            document.getElementById("delete-button-to").style.visibility = "hidden"
          } else {
            document.getElementById("toAdr").value = nameArray
            document.getElementById("toAdr2").value = nameArray
            document.getElementById("to-text").innerHTML = nameArray
            document.getElementById("delete-button-to").style.visibility = "visible"
            document.getElementById("toLng").value = coordArray[0]
            document.getElementById("toLat").value = coordArray[1]
            document.getElementById("toLng2").value = coordArray[0]
            document.getElementById("toLat2").value = coordArray[1]
          }
          if (document.getElementById("from-text").innerHTML && document.getElementById("to-text").innerHTML) {  //If both start and destination are defined, show calculation button
            document.getElementById("select-button-search").style.visibility = "visible"
          } else {
            document.getElementById("select-button-search").style.visibility = "hidden"
          }
        }

        function deleteStart() { //Delete Start point
          document.getElementById("select-button-search").style.visibility = "hidden"
          document.getElementById("from-text").innerHTML = ''
          document.getElementById("delete-button-from").style.visibility = "hidden"
        }

        function deleteEnd() { //Delete end point
          document.getElementById("select-button-search").style.visibility = "hidden"
          document.getElementById("to-text").innerHTML = ''
          document.getElementById("delete-button-to").style.visibility = "hidden"
        }

        let calTripWalk
        let calTripBike
        let co2Trip

        async function toggleSearch() { //Initiate the route API search for walking, biking and driving
          let walking = await getRouteWalking(fromArray.coords, toArray.coords)
          let biking = await getRouteBiking(fromArray.coords, toArray.coords)
          let driving = await getRouteDriving(fromArray.coords, toArray.coords)
          walking = walking[0]
          biking = biking[0]
          driving = driving[0]
          document.getElementById("routing-alternatives").style.visibility = "visible" //Show routing alternatives element in DOM
          let walkingDistance = walking.distance//Data from Mapbox API
          let walkingDuration = walking.duration
          let bikingDuration = biking.duration
          let bikingDistance = biking.distance
          let drivingDistance = driving.distance
          let drivingDuration = driving.duration

          //Driving and CO2 calculation   
          //Calculate km out of m and min out of seconds
          let text = 'Distance by Car: ' + (drivingDistance / 1000).toFixed(1) + ' km. Duration: ' + Math.floor(drivingDuration / 60) + ' min '
          document.getElementById("driving-text").innerHTML = text //
          //Two example cars have been picked for the CO2 calculation - 2018 Nissan Versa (best selling vehicle in Mexico, 125g CO2/km) and 2012 Nissan Tsuru (most popular taxi, 180g CO2/km)
          //The mean value is 153gCO2/km
          co2Trip = ((drivingDistance / 1000).toFixed(0)) * 153 //kilometers of the trip times 153
          text = 'This route by car will produce ' + co2Trip + 'g CO2.'
          document.getElementById("driving-co2").innerHTML = text

          //For both walking and biking, the calories consumption is nearly identical: 7.5 kcal/h/kg
          //Here comes the calculation for Walking
          let kg = 70
          //
          //
          //
          // Generate calories out of trip duration
          // For Walking
          calTripWalk = ((walkingDuration / 3600) * 7.5 * kg).toFixed(0)
          document.getElementById("co2").value = co2Trip //Value from car
          document.getElementById("co22").value = co2Trip //Value from car
          document.getElementById("walking-footer").innerHTML = `CO2 saved: ${co2Trip}g - Calories burned: ${calTripWalk}kcal`
          document.getElementById("walking-modal").innerHTML = `CO2 saved: ${co2Trip}g - Calories burned: ${calTripWalk}kcal`
          text = 'Walking Distance: ' + (walkingDistance / 1000).toFixed(1) + ' km. Duration: ' + Math.floor(walkingDuration / 60) + ' min '
          document.getElementById("walking-text").innerHTML = text
          //Here comes the calculation for Biking
          calTripBike = ((bikingDuration / 3600) * 7.5 * kg).toFixed(0)
          document.getElementById("biking-footer").innerHTML = `CO2 saved: ${co2Trip}g - Calories burned: ${calTripBike}kcal`
          document.getElementById("biking-modal").innerHTML = `CO2 saved: ${co2Trip}g - Calories burned: ${calTripBike}kcal`
          text = 'Distance by Bike: ' + (bikingDistance / 1000).toFixed(1) + ' km. Duration: ' + Math.floor(bikingDuration / 60) + ' min '
          document.getElementById("biking-text").innerHTML = text



          console.log(document.getElementById("co2").value)
          console.log(document.getElementById("cal").value)
        }
        //need to populate the different calorie values for walking or biking depending on user selection
        function setWalkCals() {
          document.getElementById("cal").value = calTripWalk
          document.getElementById("cal2").value = calTripWalk
        }
        function setBikeCals() {
          document.getElementById("cal").value = calTripBike
          document.getElementById("cal2").value = calTripBike
        }


        function getRouteWalking(start, end) {
          let url = 'https://api.mapbox.com/directions/v5/mapbox/walking/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;
          return fetch(url)
            .then(res => res.json())
            .then(res => res.routes)
        }

        function getRouteBiking(start, end) {
          let url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;
          return fetch(url)
            .then(res => res.json())
            .then(res => res.routes)
        }

        function getRouteDriving(start, end) {
          let url = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + mapboxgl.accessToken;
          return fetch(url)
            .then(res => res.json())
            .then(res => res.routes)
        }

  // map.addControl(new MapboxDirections({ accessToken: mapboxgl.accessToken }), 'top-left')
  //map.addControl(new mapboxgl.NavigationControl());
      </script>
    </div>
    </form>
  </div>